import boto3

# Define AWS Credentials and Region
AWS_REGION = "ap-south-1"
AWS_ACCESS_KEY = "YOUR_AWS_ACCESS_KEY"
AWS_SECRET_KEY = "YOUR_AWS_SECRET_KEY"

# Initialize Clients
s3_client = boto3.client('s3', region_name=AWS_REGION, 
                          aws_access_key_id=AWS_ACCESS_KEY, 
                          aws_secret_access_key=AWS_SECRET_KEY)

rds_client = boto3.client('rds', region_name=AWS_REGION, 
                           aws_access_key_id=AWS_ACCESS_KEY, 
                           aws_secret_access_key=AWS_SECRET_KEY)

ec2_client = boto3.client('ec2', region_name=AWS_REGION, 
                           aws_access_key_id=AWS_ACCESS_KEY, 
                           aws_secret_access_key=AWS_SECRET_KEY)

# --- S3 BUCKET OPERATIONS ---

# 1. Create an S3 Bucket
def create_s3_bucket(bucket_name):
    response = s3_client.create_bucket(
        Bucket=bucket_name,
        CreateBucketConfiguration={'LocationConstraint': AWS_REGION}
    )
    print(response)

# 2. Upload a File to S3
def upload_file_to_s3(local_file, bucket_name, s3_file):
    response = s3_client.upload_file(local_file, bucket_name, s3_file)
    print("File uploaded successfully")

# 3. List Objects in an S3 Bucket
def list_s3_objects(bucket_name):
    response = s3_client.list_objects_v2(Bucket=bucket_name)
    print(response.get('Contents', 'No objects found'))

# 4. Delete an S3 Object
def delete_s3_object(bucket_name, object_key):
    response = s3_client.delete_object(Bucket=bucket_name, Key=object_key)
    print("File deleted successfully")

# 5. Delete an S3 Bucket (Empty)
def delete_s3_bucket(bucket_name):
    response = s3_client.delete_bucket(Bucket=bucket_name)
    print(f"Bucket '{bucket_name}' deleted successfully!")

# 6. Delete an S3 Bucket with all contents
def delete_s3_bucket_with_contents(bucket_name):
    objects = s3_client.list_objects_v2(Bucket=bucket_name)
    if 'Contents' in objects:
        for obj in objects['Contents']:
            s3_client.delete_object(Bucket=bucket_name, Key=obj['Key'])
            print(f"Deleted object: {obj['Key']}")
    s3_client.delete_bucket(Bucket=bucket_name)
    print(f"Bucket '{bucket_name}' and its contents deleted successfully!")

# --- RDS OPERATIONS ---

# 7. Create an RDS Instance
def create_rds_instance():
    response = rds_client.create_db_instance(
        DBName='mydb',
        DBInstanceIdentifier='mydb-instance',
        AllocatedStorage=20,
        DBInstanceClass='db.t4g.micro',
        Engine='mysql',
        MasterUsername='admin',
        MasterUserPassword='Password123!',
        PubliclyAccessible=True,
        BackupRetentionPeriod=0  # Disable automatic backups
    )
    print(response)

# 8. List All RDS Instances
def list_rds_instances():
    try:
        response = rds_client.describe_db_instances()
        db_instances = response.get('DBInstances', [])
        if not db_instances:
            print("No RDS instances found.")
        else:
            for db_instance in db_instances:
                print(f"Instance ID: {db_instance['DBInstanceIdentifier']}")
                print(f"Engine: {db_instance['Engine']}")
                print(f"Status: {db_instance['DBInstanceStatus']}")
                print(f"Endpoint: {db_instance.get('Endpoint', {}).get('Address', 'N/A')}")
                print("-------------------------------------------------")
    except Exception as e:
        print(f"Error retrieving RDS instances: {e}")

# 9. Delete an RDS Instance
def delete_rds_instance(db_instance_identifier):
    response = rds_client.delete_db_instance(
        DBInstanceIdentifier=db_instance_identifier,
        SkipFinalSnapshot=True
    )
    print(response)

# --- EC2 OPERATIONS ---

# 10. Launch an EC2 Instance
def launch_ec2_instance():
    response = ec2_client.run_instances(
        ImageId='ami-00bb6a80f01f03502',  # Ubuntu 20.04
        InstanceType='t2.micro',
        MinCount=1,
        MaxCount=1,
        KeyName='my-key-pair'
    )
    print(response)

# 11. List All EC2 Instances
def list_ec2_instances():
    try:
        response = ec2_client.describe_instances()
        for reservation in response['Reservations']:
            for instance in reservation['Instances']:
                print("Instance ID:", instance['InstanceId'])
                print("State:", instance['State']['Name'])
                print("Public IP:", instance.get('PublicIpAddress', 'N/A'))
                print("-------------------------------------------------")
    except Exception as e:
        print(f"Error retrieving EC2 instances: {e}")

# 12. Terminate an EC2 Instance
def terminate_ec2_instance(instance_id):
    response = ec2_client.terminate_instances(InstanceIds=[instance_id])
    print(response)

# 13. Create a Security Group
def create_security_group():
    response = ec2_client.create_security_group(
        GroupName='my-security-group',
        Description='My security group'
    )
    print(response)

# 14. Create a Key Pair
def create_key_pair():
    response = ec2_client.create_key_pair(KeyName='key_name')
    print(response)

# --- TESTING FUNCTIONS ---
if __name__ == "__main__":
    BUCKET_NAME = "my-test-bucket"
    FILE_NAME = "local_file.txt"
    S3_FILE_NAME = "uploaded_file.txt"
    DB_INSTANCE_NAME = "mydb-instance"
    EC2_INSTANCE_ID = "i-0abcdef1234567890"

    # Uncomment the functions you want to run
    # create_s3_bucket(BUCKET_NAME)
    # upload_file_to_s3(FILE_NAME, BUCKET_NAME, S3_FILE_NAME)
    # list_s3_objects(BUCKET_NAME)
    # delete_s3_object(BUCKET_NAME, S3_FILE_NAME)
    # delete_s3_bucket(BUCKET_NAME)
    # delete_s3_bucket_with_contents(BUCKET_NAME)
    
    # create_rds_instance()
    # list_rds_instances()
    # delete_rds_instance(DB_INSTANCE_NAME)

    # launch_ec2_instance()
    # list_ec2_instances()
    # terminate_ec2_instance(EC2_INSTANCE_ID)
    # create_security_group()
    # create_key_pair()
